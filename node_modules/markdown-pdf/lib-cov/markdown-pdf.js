// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/markdown-pdf.js",[1,8,25,27,28,31,32,33,36,37,38,39,40,41,42,44,45,46,46,48,52,64,65,68,79,80,80,81,83,86,87,88,91,92,93,94,96,99,111,113,114,114,116,116,119,121,124,126,129,130,130,131,133,134,134,137,138,138,139,142,153,156,156,157]);
_$jscoverage_init(_$jscoverage_cond, "lib/markdown-pdf.js",[27,31,44,46,80,86,114,116,130,134,138,156]);
_$jscoverage["lib/markdown-pdf.js"].source = ["var fs = require(\"fs\")","  , async = require(\"async\")","  , markdown = require(\"markdown\").markdown","  , tmp = require('tmp')","  , childProcess = require('child_process')","  , path = require(\"path\")","","tmp.setGracefulCleanup()","","/**"," * Converts the passed Markdown files to PDF files."," * "," * @param {String|Array} filePaths Paths of markdown files to convert"," * @param {Object} [opts] Rendering options"," * @param {String} [opts.phantomPath] Path to phantom binary"," * @param {String} [opts.cssPath] Path to custom CSS file"," * @param {String} [opts.paperFormat] 'A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid'"," * @param {String} [opts.paperOrientation] 'portrait' or 'landscape'"," * @param {String} [opts.paperBorder] Supported dimension units are: 'mm', 'cm', 'in', 'px'"," * @param {Number} [opts.renderDelay] Delay before rendering the PDF (give HTML and CSS a chance to load)"," * @param {Function} cb Callback function invoked when the files have been generated. Passed Error and an Array of"," * file paths - a list of PDF files containing your PDF content. These are stored in a temp folder so if you want to"," * keep them, you MUST move or copy them or they will be deleted when the process exits."," */","module.exports = function (filePaths, opts, cb) {","  ","  if (Object.prototype.toString.call(filePaths) == '[object String]') {","    filePaths = [filePaths]","  }","  ","  if (!cb) {","    cb = opts","    opts = {}","  }","  ","  opts.phantomPath = opts.phantomPath || require(\"phantomjs\").path","  opts.cssPath = opts.cssPath || \"../pdf.css\"","  opts.paperFormat = opts.paperFormat || \"A4\"","  opts.paperOrientation = opts.paperOrientation || \"portrait\"","  opts.paperBorder = opts.paperBorder || \"1cm\"","  opts.renderDelay = opts.renderDelay || 500","  opts.concatFiles = opts.concatFiles || false","","  if (opts.concatFiles) {","    concatFiles(filePaths, function(er, concatenatedFile) {","      if (er) return cb(er)","","      run([ concatenatedFile ], opts, cb)","    })","  }","  else {","    run(filePaths, opts, cb)","  }","}","","/**"," * Run the coversion tasks."," *"," * @param  {Array} filePaths Paths of files to convert"," * @param  {Object} opts Render options"," * @param {Function} cb Callback function invoked when the files have been generated"," */","function run (filePaths, opts, cb) {","  var tasks = filePaths.map(function (filename) {","    return markdownToPdfTask(path.resolve(filename), opts)","  })","  ","  async.parallel(tasks, cb)","}","","/**"," * Concatenate files into a single file."," *"," * @param  {Array} filePaths Paths to files to concatenate together"," * @param  {Function} cb Callback function invoked when the files have been concatenated. Passed Error and a String"," * path to the new file."," */","function concatFiles (filePaths, cb) {","  tmp.file(function (er, tmpMdPath, tmpMdFd) {","    if (er) return cb(er)","    fs.close(tmpMdFd)","","    var writeStream = fs.createWriteStream(tmpMdPath)","","    function iterate () {","      if (filePaths.length === 0) {","        writeStream.end();","        return cb(null, tmpMdPath)","      }","","      var path = filePaths.shift()","      var readStream = fs.createReadStream(path)","      readStream.on('end', function () {","        iterate()","      })","      readStream.pipe(writeStream, { end: false })","    }","","    iterate()","  })","}","","/**"," * Create a function that can be passed to async.parallel that performs the conversion."," * "," * @param {String} filePath File to convert"," * @param {Object} opts Render options"," * @returns {Function}"," */","function markdownToPdfTask (filePath, opts) {","  return function (cb) {","    ","    fs.stat(filePath, function (er, stats) {","      if (er) return cb(er)","      ","      if (!stats.isFile()) return cb(new Error(filePath + \" is not a file\"))","      ","      // Read the markdown","      fs.readFile(filePath, {encoding: 'utf-8'}, function (er, data) {","        ","        data = opts.preProcessMd ? opts.preProcessMd(data) : data","        ","        // Convert to HTML","        var html = markdown.toHTML(data)","        ","        html = opts.preProcessHtml ? opts.preProcessHtml(html) : html","        ","        // Save HTML to tmp file","        tmp.file(function (er, tmpHtmlPath, tmpHtmlFd) {","          if (er) return cb(er)","          fs.close(tmpHtmlFd)","          ","          fs.writeFile(tmpHtmlPath, html, function (er) {","            if (er) return cb(er)","            ","            // Create tmp file to save PDF to","            tmp.file({postfix: '.pdf'}, function (er, tmpPdfPath, tmpPdfFd) {","              if (er) return cb(er)","              fs.close(tmpPdfFd)","              ","              // Invoke phantom and to generate the PDF","              var childArgs = [","                  path.join(__dirname, \"..\", \"lib-phantom\", \"markdown-pdf.js\")","                , tmpHtmlPath","                , tmpPdfPath","                , opts.cssPath","                , opts.paperFormat","                , opts.paperOrientation","                , opts.paperBorder","                , opts.renderDelay","              ]","              ","              childProcess.execFile(opts.phantomPath, childArgs, function(er, stdout, stderr) {","                //if (stdout) console.log(stdout)","                //if (stderr) console.error(stderr)","                if (er) return cb(er)","                cb(null, tmpPdfPath)","              })","            })","          })","        })","      })","    })","  }","}"];
_$jscoverage_done("lib/markdown-pdf.js", 1);
var fs = require("fs"), async = require("async"), markdown = require("markdown").markdown, tmp = require("tmp"), childProcess = require("child_process"), path = require("path");

_$jscoverage_done("lib/markdown-pdf.js", 8);
tmp.setGracefulCleanup();

_$jscoverage_done("lib/markdown-pdf.js", 25);
module.exports = function(filePaths, opts, cb) {
    _$jscoverage_done("lib/markdown-pdf.js", 27);
    if (_$jscoverage_done("lib/markdown-pdf.js", 27, Object.prototype.toString.call(filePaths) == "[object String]")) {
        _$jscoverage_done("lib/markdown-pdf.js", 28);
        filePaths = [ filePaths ];
    }
    _$jscoverage_done("lib/markdown-pdf.js", 31);
    if (_$jscoverage_done("lib/markdown-pdf.js", 31, !cb)) {
        _$jscoverage_done("lib/markdown-pdf.js", 32);
        cb = opts;
        _$jscoverage_done("lib/markdown-pdf.js", 33);
        opts = {};
    }
    _$jscoverage_done("lib/markdown-pdf.js", 36);
    opts.phantomPath = opts.phantomPath || require("phantomjs").path;
    _$jscoverage_done("lib/markdown-pdf.js", 37);
    opts.cssPath = opts.cssPath || "../pdf.css";
    _$jscoverage_done("lib/markdown-pdf.js", 38);
    opts.paperFormat = opts.paperFormat || "A4";
    _$jscoverage_done("lib/markdown-pdf.js", 39);
    opts.paperOrientation = opts.paperOrientation || "portrait";
    _$jscoverage_done("lib/markdown-pdf.js", 40);
    opts.paperBorder = opts.paperBorder || "1cm";
    _$jscoverage_done("lib/markdown-pdf.js", 41);
    opts.renderDelay = opts.renderDelay || 500;
    _$jscoverage_done("lib/markdown-pdf.js", 42);
    opts.concatFiles = opts.concatFiles || false;
    _$jscoverage_done("lib/markdown-pdf.js", 44);
    if (_$jscoverage_done("lib/markdown-pdf.js", 44, opts.concatFiles)) {
        _$jscoverage_done("lib/markdown-pdf.js", 45);
        concatFiles(filePaths, function(er, concatenatedFile) {
            _$jscoverage_done("lib/markdown-pdf.js", 46);
            if (_$jscoverage_done("lib/markdown-pdf.js", 46, er)) {
                _$jscoverage_done("lib/markdown-pdf.js", 46);
                return cb(er);
            }
            _$jscoverage_done("lib/markdown-pdf.js", 48);
            run([ concatenatedFile ], opts, cb);
        });
    } else {
        _$jscoverage_done("lib/markdown-pdf.js", 52);
        run(filePaths, opts, cb);
    }
};

function run(filePaths, opts, cb) {
    _$jscoverage_done("lib/markdown-pdf.js", 64);
    var tasks = filePaths.map(function(filename) {
        _$jscoverage_done("lib/markdown-pdf.js", 65);
        return markdownToPdfTask(path.resolve(filename), opts);
    });
    _$jscoverage_done("lib/markdown-pdf.js", 68);
    async.parallel(tasks, cb);
}

function concatFiles(filePaths, cb) {
    _$jscoverage_done("lib/markdown-pdf.js", 79);
    tmp.file(function(er, tmpMdPath, tmpMdFd) {
        _$jscoverage_done("lib/markdown-pdf.js", 80);
        if (_$jscoverage_done("lib/markdown-pdf.js", 80, er)) {
            _$jscoverage_done("lib/markdown-pdf.js", 80);
            return cb(er);
        }
        _$jscoverage_done("lib/markdown-pdf.js", 81);
        fs.close(tmpMdFd);
        _$jscoverage_done("lib/markdown-pdf.js", 83);
        var writeStream = fs.createWriteStream(tmpMdPath);
        function iterate() {
            _$jscoverage_done("lib/markdown-pdf.js", 86);
            if (_$jscoverage_done("lib/markdown-pdf.js", 86, filePaths.length === 0)) {
                _$jscoverage_done("lib/markdown-pdf.js", 87);
                writeStream.end();
                _$jscoverage_done("lib/markdown-pdf.js", 88);
                return cb(null, tmpMdPath);
            }
            _$jscoverage_done("lib/markdown-pdf.js", 91);
            var path = filePaths.shift();
            _$jscoverage_done("lib/markdown-pdf.js", 92);
            var readStream = fs.createReadStream(path);
            _$jscoverage_done("lib/markdown-pdf.js", 93);
            readStream.on("end", function() {
                _$jscoverage_done("lib/markdown-pdf.js", 94);
                iterate();
            });
            _$jscoverage_done("lib/markdown-pdf.js", 96);
            readStream.pipe(writeStream, {
                end: false
            });
        }
        _$jscoverage_done("lib/markdown-pdf.js", 99);
        iterate();
    });
}

function markdownToPdfTask(filePath, opts) {
    _$jscoverage_done("lib/markdown-pdf.js", 111);
    return function(cb) {
        _$jscoverage_done("lib/markdown-pdf.js", 113);
        fs.stat(filePath, function(er, stats) {
            _$jscoverage_done("lib/markdown-pdf.js", 114);
            if (_$jscoverage_done("lib/markdown-pdf.js", 114, er)) {
                _$jscoverage_done("lib/markdown-pdf.js", 114);
                return cb(er);
            }
            _$jscoverage_done("lib/markdown-pdf.js", 116);
            if (_$jscoverage_done("lib/markdown-pdf.js", 116, !stats.isFile())) {
                _$jscoverage_done("lib/markdown-pdf.js", 116);
                return cb(new Error(filePath + " is not a file"));
            }
            _$jscoverage_done("lib/markdown-pdf.js", 119);
            fs.readFile(filePath, {
                encoding: "utf-8"
            }, function(er, data) {
                _$jscoverage_done("lib/markdown-pdf.js", 121);
                data = opts.preProcessMd ? opts.preProcessMd(data) : data;
                _$jscoverage_done("lib/markdown-pdf.js", 124);
                var html = markdown.toHTML(data);
                _$jscoverage_done("lib/markdown-pdf.js", 126);
                html = opts.preProcessHtml ? opts.preProcessHtml(html) : html;
                _$jscoverage_done("lib/markdown-pdf.js", 129);
                tmp.file(function(er, tmpHtmlPath, tmpHtmlFd) {
                    _$jscoverage_done("lib/markdown-pdf.js", 130);
                    if (_$jscoverage_done("lib/markdown-pdf.js", 130, er)) {
                        _$jscoverage_done("lib/markdown-pdf.js", 130);
                        return cb(er);
                    }
                    _$jscoverage_done("lib/markdown-pdf.js", 131);
                    fs.close(tmpHtmlFd);
                    _$jscoverage_done("lib/markdown-pdf.js", 133);
                    fs.writeFile(tmpHtmlPath, html, function(er) {
                        _$jscoverage_done("lib/markdown-pdf.js", 134);
                        if (_$jscoverage_done("lib/markdown-pdf.js", 134, er)) {
                            _$jscoverage_done("lib/markdown-pdf.js", 134);
                            return cb(er);
                        }
                        _$jscoverage_done("lib/markdown-pdf.js", 137);
                        tmp.file({
                            postfix: ".pdf"
                        }, function(er, tmpPdfPath, tmpPdfFd) {
                            _$jscoverage_done("lib/markdown-pdf.js", 138);
                            if (_$jscoverage_done("lib/markdown-pdf.js", 138, er)) {
                                _$jscoverage_done("lib/markdown-pdf.js", 138);
                                return cb(er);
                            }
                            _$jscoverage_done("lib/markdown-pdf.js", 139);
                            fs.close(tmpPdfFd);
                            _$jscoverage_done("lib/markdown-pdf.js", 142);
                            var childArgs = [ path.join(__dirname, "..", "lib-phantom", "markdown-pdf.js"), tmpHtmlPath, tmpPdfPath, opts.cssPath, opts.paperFormat, opts.paperOrientation, opts.paperBorder, opts.renderDelay ];
                            _$jscoverage_done("lib/markdown-pdf.js", 153);
                            childProcess.execFile(opts.phantomPath, childArgs, function(er, stdout, stderr) {
                                _$jscoverage_done("lib/markdown-pdf.js", 156);
                                if (_$jscoverage_done("lib/markdown-pdf.js", 156, er)) {
                                    _$jscoverage_done("lib/markdown-pdf.js", 156);
                                    return cb(er);
                                }
                                _$jscoverage_done("lib/markdown-pdf.js", 157);
                                cb(null, tmpPdfPath);
                            });
                        });
                    });
                });
            });
        });
    };
}