{
  "name": "markdown-pdf",
  "version": "1.1.1",
  "description": "Markdown to PDF converter",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "coveralls": "jscoverage lib && MARKDOWNPDF_COV=1 mocha -R mocha-lcov-reporter | coveralls",
    "coverage": "MARKDOWNPDF_COV=1 mocha -R html-cov > coverage.html"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:alanshaw/markdown-pdf.git"
  },
  "keywords": [
    "markdown",
    "pdf",
    "convert",
    "template"
  ],
  "author": {
    "name": "Alan Shaw"
  },
  "homepage": "https://github.com/alanshaw/markdown-pdf",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/alanshaw/markdown-pdf/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "marked": "~0.2.9",
    "phantomjs": "~1.9.1-6",
    "async": "~0.2.8",
    "tmp": "~0.0.18",
    "commander": "~2.0.0"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "mocha-lcov-reporter": "0.0.1",
    "coveralls": "~2.3.0",
    "jscoverage": "~0.3.7"
  },
  "engines": {
    "node": "~0.10.0"
  },
  "bin": {
    "markdown-pdf": "bin/markdown-pdf"
  },
  "readme": "markdown-pdf [![Build Status](https://travis-ci.org/alanshaw/markdown-pdf.png)](https://travis-ci.org/alanshaw/markdown-pdf) [![Dependency Status](https://david-dm.org/alanshaw/markdown-pdf.png)](https://david-dm.org/alanshaw/markdown-pdf) [![Coverage Status](https://coveralls.io/repos/alanshaw/markdown-pdf/badge.png)](https://coveralls.io/r/alanshaw/markdown-pdf)\n===\n\nNode module that converts Markdown files to PDFs.\n\nThe PDF looks great because it is styled by HTML5 Boilerplate. What? - Yes! Your Markdown is first converted to HTML, then pushed into the HTML5 Boilerplate `index.html`. Phantomjs renders the page and saves it to a PDF. You can even customise the style of the PDF by passing an optional path to your CSS _and_ you can pre-process your markdown file before it is converted to a PDF by passing in a pre-processing function, for templating.\n\nGetting started\n---\n\n    npm install markdown-pdf\n\nExample Usage\n---\n\nPass markdown-pdf a path to a markdown document or an array of paths and you'll be given back a path or an array of paths to temporary files that contain your converted PDFs.\n\n```javascript\nvar markdownpdf = require(\"markdown-pdf\")\n  , fs = require(\"fs\")\n\nmarkdownpdf(\"/path/to/document.md\", function (er, pdfPath) {\n  if (er) return console.error(er)\n  \n  // Move the pdf from the tmp path to where you want it\n  fs.rename(pdfPath, \"/path/to/document.pdf\", function() {\n    console.log(\"done\")\n  })\n})\n```\n\n### Options\n\nPass options to markdown-pdf like so:\n\n```javascript\nvar markdownpdf = require(\"markdown-pdf\")\n  , opts = {/* options */}\n\nmarkdownpdf(\"/path/to/document.md\", opts, function (er, pdfs) {})\n```\n\n#### options.phantomPath\nType: `String`\nDefault value: `Path provided by phantomjs module`\n\nPath to phantom binary\n\n#### options.concatFiles\nType: `Boolean`\nDefault value: `false`\n\nIf set to true, a single PDF will be created containing the contents of all of the Markdown files.\n\n#### options.cssPath\nType: `String`\nDefault value: `../pdf.css`\n\nPath to custom CSS file, relative to the current working directory\n\n#### options.paperFormat\nType: `String`\nDefault value: `A4`\n\n'A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid'\n\n#### options.paperOrientation\nType: `String`\nDefault value: `portrait`\n\n'portrait' or 'landscape'\n\n#### options.paperBorder\nType: `String`\nDefault value: `1cm`\n\nSupported dimension units are: 'mm', 'cm', 'in', 'px'\n\n#### options.renderDelay\nType: `Number`\nDefault value: `1000`\n\nDelay in millis before rendering the PDF (give HTML and CSS a chance to load)\n\n#### options.preProcessMd\nType: `Function`\nDefault value: `null`\n\nFunction to call before Markdown is converted to HTML. It is passed the Markdown file contents and _must_ return a string\n\n#### options.preProcessHtml\nType: `Function`\nDefault value: `null`\n\nFunction to call after Markdown has been converted to HTML but before it is converted to PDF. It is passed the Markdown file contents and _must_ return a string\n\nCLI Interface\n---\n\n### Installation\n\nTo use markdown-pdf as a standalone program from the terminal run\n\n```sh\nnpm install -g markdown-pdf\n```\n\n### Usage\n\n```sh\nUsage: markdown-pdf [options] <markdown-file-path>\n\nOptions:\n\n  -h, --help                             output usage information\n  -V, --version                          output the version number\n  <markdown-file-path>                   Path of the markdown file to convert\n  -p, --phantom-path [path]              Path to phantom binary\n  -s, --css-path [path]                  Path to custom CSS file\n  -f, --paper-format [format]            'A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid'\n  -r, --paper-orientation [orientation]  'portrait' or 'landscape'\n  -b, --paper-border [measurement]       Supported dimension units are: 'mm', 'cm', 'in', 'px'\n  -d, --render-delay [millis]            Delay before rendering the PDF (give HTML and CSS a chance to load)\n  -o, --out [path]                       Path of where to save the PDF\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alanshaw/markdown-pdf/issues"
  },
  "_id": "markdown-pdf@1.1.1",
  "dist": {
    "shasum": "4765cd2e79343f6e273717d0b2d2ed48714ebe50"
  },
  "_from": "markdown-pdf@~1.1.0",
  "_resolved": "https://registry.npmjs.org/markdown-pdf/-/markdown-pdf-1.1.1.tgz"
}
